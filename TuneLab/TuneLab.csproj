<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<!--If you are willing to use Windows/MacOS native APIs you will need to create 3 projects.
    One for Windows with net8.0-windows TFM, one for MacOS with net8.0-macos and one with net8.0 TFM for Linux.-->
		<TargetFramework>net8.0</TargetFramework>
		<Nullable>enable</Nullable>
		<BuiltInComInteropSupport>true</BuiltInComInteropSupport>
		<ApplicationManifest>app.manifest</ApplicationManifest>
		<LangVersion>latest</LangVersion>
		<Version>1.5.10</Version>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<VcpkgRoot Condition="'$(VCPKG_ROOT)' != '' AND Exists('$(VCPKG_ROOT)\vcpkg.exe')">$(VCPKG_ROOT)</VcpkgRoot>
		<VcpkgRoot Condition="'$(VCPKG_ROOT)' != '' AND Exists('$(VCPKG_ROOT)\vcpkg')">$(VCPKG_ROOT)</VcpkgRoot>
		<VcpkgRoot Condition="'$(VcpkgRoot)' == ''">$(MSBuildThisFileDirectory)vcpkg</VcpkgRoot>
		<ScriptsPath>$(MSBuildThisFileDirectory)scripts\</ScriptsPath>
		<VcpkgOverlayRoot>$(ScriptsPath)vcpkg-overlay\</VcpkgOverlayRoot>
		<!-- 定义平台相关的路径 -->
		<VcpkgTriplet Condition="'$(OS)' == 'Windows_NT'">x64-windows</VcpkgTriplet>
		<VcpkgTriplet Condition="'$(OS)' == 'Unix' AND $([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))">x64-osx</VcpkgTriplet>
		<VcpkgTriplet Condition="'$(OS)' == 'Unix' AND $([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))">x64-linux</VcpkgTriplet>
	</PropertyGroup>

	<ItemGroup>
		<AvaloniaResource Include="Assets\**" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Avalonia" Version="11.2.2" />
		<PackageReference Include="Avalonia.Svg.Skia" Version="11.2.0.2" />
		<PackageReference Include="Avalonia.Themes.Fluent" Version="11.2.2" />
		<PackageReference Include="Avalonia.Fonts.Inter" Version="11.2.2" />
		<PackageReference Include="Avalonia.ReactiveUI" Version="11.2.2" />
		<PackageReference Include="Avalonia.Desktop" Version="11.2.2" />
		<!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
		<PackageReference Condition="'$(Configuration)' == 'Debug'" Include="Avalonia.Diagnostics" Version="11.2.2" />
		<PackageReference Include="BunLabs.NAudio.Flac" Version="2.0.1" />
		<PackageReference Include="csharp-kana" Version="1.0.1" />
		<PackageReference Include="csharp-pinyin" Version="1.0.1" />
		<PackageReference Include="Flurl.Http" Version="4.0.2" />
		<PackageReference Include="Markdown.Avalonia" Version="11.0.3-a1" />
		<PackageReference Include="Microsoft.Extensions.ObjectPool" Version="9.0.0" />
		<PackageReference Include="NAudio" Version="2.2.1" />
		<PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
		<PackageReference Include="NLayer.NAudioSupport" Version="1.4.0" />
		<PackageReference Include="PinYinConverterCore" Version="1.0.2" />
		<PackageReference Include="ppy.SDL2-CS" Version="1.0.741-alpha" />
		<PackageReference Include="Svg.Skia" Version="2.0.0.4" />
		<PackageReference Include="System.Net.Http" Version="4.3.4" />
		<PackageReference Include="System.Text.RegularExpressions" Version="4.3.1" />
		<PackageReference Include="Tomlyn" Version="0.17.0" />
		<PackageReference Include="ZstdSharp.Port" Version="0.8.3" />
		<PackageReference Include="FFmpeg.AutoGen" Version="5.1.1" />
	</ItemGroup>

	<ItemGroup>
	  <ProjectReference Include="..\ExtensionInstaller\ExtensionInstaller.csproj" />
	  <ProjectReference Include="..\TuneLab.Base\TuneLab.Base.csproj" />
	  <ProjectReference Include="..\TuneLab.Extensions.Formats\TuneLab.Extensions.Formats.csproj" />
	  <ProjectReference Include="..\TuneLab.Extensions.Voices\TuneLab.Extensions.Voices.csproj" />
	</ItemGroup>

	<ItemGroup>
	  <None Update="Resources\**\*.*">
	    <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	  </None>
	</ItemGroup>

	<!-- 自定义目标：检查并安装 vcpkg -->
	<Target Name="InstallVcpkg" BeforeTargets="Build">
		<Exec Command="git clone https://github.com/SineStriker/vcpkg-overlay.git $(VcpkgOverlayRoot)" Condition="!Exists('$(VcpkgOverlayRoot)')" />
		<Exec Command="git clone https://github.com/microsoft/vcpkg.git $(VcpkgRoot)" Condition="!Exists('$(VcpkgRoot)')" />
		<!-- Windows -->
		<Exec Command="$(VcpkgRoot)\bootstrap-vcpkg.bat" Condition="'$(OS)' == 'Windows_NT' AND !Exists('$(VcpkgRoot)\vcpkg.exe')" />
		<!-- macOS/Linux -->
		<Exec Command="$(VcpkgRoot)\bootstrap-vcpkg.sh" Condition="'$(OS)' == 'Unix' AND !Exists('$(VcpkgRoot)\vcpkg')" />
		<Exec Command="$(VcpkgRoot)\vcpkg install --x-manifest-root=$(ScriptsPath)vcpkg-manifest --x-install-root=$(VcpkgOverlayRoot)\installed --triplet $(VcpkgTriplet)" />
	</Target>

	<!-- 将 FFmpeg 的动态库复制到输出目录 -->
	<Target Name="CopyLibraries" AfterTargets="Build">
		<ItemGroup>
			<!-- Windows -->
			<FFmpegLibraries Include="$(VcpkgOverlayRoot)\installed\$(VcpkgTriplet)\bin\*.dll" Condition="'$(OS)' == 'Windows_NT'" />
			<!-- macOS -->
			<FFmpegLibraries Include="$(VcpkgOverlayRoot)\installed\$(VcpkgTriplet)\lib\*.dylib" Condition="'$(OS)' == 'Unix' AND $([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))" />
			<!-- Linux -->
			<FFmpegLibraries Include="$(VcpkgOverlayRoot)\installed\$(VcpkgTriplet)\lib\*.so" Condition="'$(OS)' == 'Unix' AND $([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))" />
		</ItemGroup>
		<Copy SourceFiles="@(FFmpegLibraries)" DestinationFolder="$(OutputPath)\ffmpeg" />
	</Target>
</Project>
